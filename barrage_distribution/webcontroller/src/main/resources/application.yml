dubbo:
  protocol:
    port: -1
  application:
    name: authoritation
  scan:
    base-packages: com.barrage.webcontroller
  registry:
    address: zookeeper://127.0.0.1:2181
  consumer:
      timeout: 3000
  provider:
    timeout: 3000
server:
  port: 9100


spring:
  mail:
#    qq邮箱配置
    host: smtp.qq.com
    username: 2359536639@qq.com
    password: xwfchyeomxetebag
#      163邮箱配置
#    host: smtp.163.com
#    username: 18711660142@163.com
#    password: PNXHHVADFJSKLSRZ
    default-encoding: UTF-8
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
    port: 587
#  kafka:
#    producer:
#    # 指定kafka server的地址，集群配多个，中间，逗号隔开
#      bootstrap-servers: 127.0.0.1:9092
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: com.barrage.webcontroller.serializers.CommonSerializer
#      #=============== provider  =======================
#      # 写入失败时，重试次数。当leader节点失效，一个repli节点会替代成为leader节点，此时可能出现写入失败，
#      # 当retris为0时，produce不会重复。retirs重发，此时repli节点完全成为leader节点，不会产生消息丢失。
#      retries: 0
#      # 每次批量发送消息的数量,produce积累到一定数据，一次发送
#      batch-size: 16384
#      # produce积累数据一次发送，缓存大小达到buffer.memory就发送数据
#      buffer-memory: 33554432
#      #procedure要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端的持久化，其值可以为如下：
#      #acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
#      #acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
#      #acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
#      #可以设置的值为：all, -1, 0, 1
#      acks: 1
#    consumer:
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: com.barrage.webcontroller.deserializers.CommonDeserializer
#      # 指定默认消费者group id --> 由于在kafka中，同一组中的consumer不会读取到同一个消息，依靠groud.id设置组名
#      group-id: testGroup
#      # smallest和largest才有效，如果smallest重新0开始读取，如果是largest从logfile的offset读取。一般情况下我们都是设置smallest
#      auto-offset-reset: earliest
#      # enable.auto.commit:true --> 设置自动提交offset
#      enable-auto-commit: true
#      #如果'enable.auto.commit'为true，则消费者偏移自动提交给Kafka的频率（以毫秒为单位），默认值为5000。
#      auto-commit-interval: 100ms